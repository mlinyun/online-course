# 配置项目应用名称
spring.application.name=online-course
# Web 项目基础配置
# 设置项目启动的端口号
server.port=8103
# 设置项目路径，构成 url 地址的一部分
server.servlet.context-path=/api

# 日志配置
# 设置日志级别
logging.level.root=info
# 生成日志文件
logging.file.name=./logs/online-course-site.log

# Tomcat 服务器配置
# URI编码格式设置为 UTF-8，以支持各种语言和字符
server.tomcat.uri-encoding=UTF-8
# Tomcat 服务器可创建的最大线程数
server.tomcat.threads.max=1000
# Tomcat服务器保留的最小空闲线程数
server.tomcat.threads.min-spare=30
# 配置 Tomcat 容器可以接受的最大请求体大小，默认情况下，Tomcat 容器会限制请求体的大小为2MB
# 超过这个限制的请求将被拒绝，设置为 -1，表示取消对请求体大小的限制，接受任意大小的请求体
server.tomcat.max-swallow-size=-1

# 设置应用程序的优雅关闭方式
server.shutdown=graceful

# Swagger UI 配置项
# 自定义 Swagger UI 的 URL 地址
springdoc.swagger-ui.path=/online-course-api.html
# 设置 Swagger UI 中的标签按字母顺序排序
springdoc.swagger-ui.tags-sorter=alpha
# 设置 Swagger UI 中的接口按字母顺序排序
springdoc.swagger-ui.operations-sorter=alpha
# 指定生成的 OpenAPI 规范（JSON 格式）的访问路径为
springdoc.api-docs.path=/v3/api-docs


# knife4j 配置项
# 开启Knife4j增强模式
knife4j.enable=true
# 设置 Knife4j 的语言为简体中文
knife4j.setting.language=zh_cn
# 开启 BasicHttp 校验，保护文档
knife4j.basic.enable=true
# basic用户名
knife4j.basic.username=TestApi
# basic密码
knife4j.basic.password=123456
# 开启生产环境屏蔽 true：生产环境 false：非生产环境
knife4j.production=false

# 数据源基本配置
# 配置数据库连接的url
spring.datasource.url=jdbc:mysql://localhost:3306/online_course?useUnicode=true&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true
# 指定数据库驱动程序的类
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 配置数据库的用户名
spring.datasource.username=root
# 配置数据库的密码
spring.datasource.password=123456

# Druid 数据源配置
# 指定数据源类型
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 配置 Alibaba Druid 数据源的防火墙（wall）过滤器允许执行多条 SQL 语句
# Hikari 数据源的最大生命周期时间，单位为毫秒，在达到该时间后，连接将被关闭并重新创建
spring.datasource.hikari.max-lifetime=60000
# Hikari 数据源的最大连接池大小，指定连接池中允许的最大连接数
spring.datasource.hikari.maximum-pool-size=1000
# 配置允许执行多语句SQL
spring.datasource.druid.filter.wall.config.multi-statement-allow=true
# 初始化时建立数据库连接的个数
spring.datasource.initialSize=10
# 最小连接池数量
spring.datasource.minIdle=5
# 最大连接池数量
spring.datasource.maxActive=30
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的SQL语句
spring.datasource.validationQuery=SELECT 1
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false

# MyBatis 配置项
# 配置 Mapper 文件对应的 XML 文件路径
mybatis.mapper-locations=classpath:/mapper/*.xml
# 配置项目中实体类包路径
mybatis.type-aliases-package=com.mlinyun.onlinecourse.data.entity

# MyBatisPlus 配置项
# 设置逻辑删除的值为 1。在使用 MyBatis-Plus 进行逻辑删除时，数据库中相应字段的值将被修改为该值
mybatis-plus.global-config.db-config.logic-delete-value=1
# 设置逻辑未删除的值为 0。在使用 MyBatis-Plus 进行逻辑删除时，数据库中相应字段的值将被修改为该值
mybatis-plus.global-config.db-config.logic-not-delete-value=0
# 指定 MyBatis Mapper XML 文件的路径， MyBatis-Plus 将扫描该路径下的 XML 文件，
# 并将其解析成对应的 SQL 映射语句
mybatis-plus.mapper-locations=classpath*:mapper/*.xml
# 设置 MyBatis 的日志实现类为 org.apache.ibatis.logging.stdout.StdOutImpl。
# 这意味着 MyBatis 将使用标准输出来记录 SQL 执行日志
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

# Redis 配置项
# redis 机器 ip
spring.data.redis.host=localhost
# redis 端口号
spring.data.redis.port=6379
# redis 密码
spring.data.redis.password=123456
# 目标数据库序号
spring.data.redis.database=4
# redis 超时时间
spring.data.redis.connect-timeout=30000ms
# redis连接池配置
# 连接池中最小的空闲链接，默认为 0
spring.data.redis.lettuce.pool.min-idle=0
# 连接池中最大的空闲链接，默认为 8
spring.data.redis.lettuce.pool.max-idle=8
# 连接池中的最大连接数，默认为 8
spring.data.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间，负值表示没有限制
#spring.data.redis.lettuce.pool.min-idle=-1
